"use strict";(self.webpackChunkthree_horizons_docusaurus=self.webpackChunkthree_horizons_docusaurus||[]).push([[804],{2556:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"phase6-monitoring","title":"Phase 6: Monitoring & Observability","description":"In this phase, we\'ll set up comprehensive monitoring and observability for the Three Horizons Platform to ensure optimal performance and quick troubleshooting.","source":"@site/docs/phase6-monitoring.md","sourceDirName":".","slug":"/phase6-monitoring","permalink":"/three-horizon-site/docs/phase6-monitoring","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"docsSidebar","previous":{"title":"Phase 5: CI/CD Pipeline Setup","permalink":"/three-horizon-site/docs/phase5-cicd"},"next":{"title":"Phase 7: Platform Validation","permalink":"/three-horizon-site/docs/phase7-validation"}}');var t=r(4848),a=r(8453);const s={sidebar_position:7},i="Phase 6: Monitoring & Observability",c={},l=[{value:"Step 6.1: Deploy Azure Monitor for Containers",id:"step-61-deploy-azure-monitor-for-containers",level:2},{value:"Step 6.2: Configure Prometheus and Grafana",id:"step-62-configure-prometheus-and-grafana",level:2},{value:"Step 6.3: Configure Application Insights",id:"step-63-configure-application-insights",level:2},{value:"Step 6.4: Configure Log Analytics Queries",id:"step-64-configure-log-analytics-queries",level:2},{value:"Step 6.5: Create Monitoring Dashboards",id:"step-65-create-monitoring-dashboards",level:2},{value:"Step 6.6: Configure Alerts",id:"step-66-configure-alerts",level:2}];function h(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"phase-6-monitoring--observability",children:"Phase 6: Monitoring & Observability"})}),"\n",(0,t.jsx)(n.p,{children:"In this phase, we'll set up comprehensive monitoring and observability for the Three Horizons Platform to ensure optimal performance and quick troubleshooting."}),"\n",(0,t.jsx)(n.h2,{id:"step-61-deploy-azure-monitor-for-containers",children:"Step 6.1: Deploy Azure Monitor for Containers"}),"\n",(0,t.jsx)(n.p,{children:"First, let's set up Azure Monitor for container insights:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Enable monitoring add-on if not already enabled during AKS creation\naz aks enable-addons \\\n  --resource-group three-horizons-platform \\\n  --name three-horizons-aks \\\n  --addons monitoring\n\n# For ARO, enable monitoring through the Azure portal or with:\naz monitor log-analytics workspace create \\\n  --resource-group three-horizons-platform \\\n  --workspace-name three-horizons-workspace \\\n  --location centralus\n\n# Get the workspace ID and key\nWORKSPACE_ID=$(az monitor log-analytics workspace show \\\n  --resource-group three-horizons-platform \\\n  --workspace-name three-horizons-workspace \\\n  --query customerId -o tsv)\n\nWORKSPACE_KEY=$(az monitor log-analytics workspace get-shared-keys \\\n  --resource-group three-horizons-platform \\\n  --workspace-name three-horizons-workspace \\\n  --query primarySharedKey -o tsv)\n\n# Deploy the monitoring agent to ARO\noc create namespace azure-monitoring\noc project azure-monitoring\n\n# Create secret for the Log Analytics workspace\noc create secret generic oms-agent \\\n  --from-literal=WSID=$WORKSPACE_ID \\\n  --from-literal=KEY=$WORKSPACE_KEY\n\n# Deploy the monitoring agent\noc apply -f https://raw.githubusercontent.com/Microsoft/OMS-docker/master/Kubernetes/container-azm-ms-agentconfig.yaml\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-62-configure-prometheus-and-grafana",children:"Step 6.2: Configure Prometheus and Grafana"}),"\n",(0,t.jsx)(n.p,{children:"Deploy Prometheus and Grafana for detailed metrics:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Add Prometheus Helm repository\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\nhelm repo update\n\n# Create monitoring namespace\nkubectl create namespace monitoring\n\n# Install Prometheus using Helm\nhelm install prometheus prometheus-community/kube-prometheus-stack \\\n  --namespace monitoring \\\n  --set grafana.adminPassword="StrongPassword123!" \\\n  --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \\\n  --set prometheus.prometheusSpec.podMonitorSelectorNilUsesHelmValues=false\n\n# Expose Grafana service\nkubectl patch svc prometheus-grafana \\\n  --namespace monitoring \\\n  --type=\'json\' \\\n  -p \'[{"op":"replace","path":"/spec/type","value":"LoadBalancer"}]\'\n\n# Get Grafana external IP\nGRAFANA_IP=$(kubectl get svc prometheus-grafana \\\n  --namespace monitoring \\\n  -o jsonpath=\'{.status.loadBalancer.ingress[0].ip}\')\n\necho "Grafana is available at: http://$GRAFANA_IP"\necho "Username: admin"\necho "Password: StrongPassword123!"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"step-63-configure-application-insights",children:"Step 6.3: Configure Application Insights"}),"\n",(0,t.jsx)(n.p,{children:"Set up Application Insights for application-level monitoring:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Create Application Insights resource\naz monitor app-insights component create \\\n  --app three-horizons-insights \\\n  --location centralus \\\n  --resource-group three-horizons-shared \\\n  --application-type web \\\n  --kind web\n\n# Get the instrumentation key\nAPPINSIGHTS_KEY=$(az monitor app-insights component show \\\n  --app three-horizons-insights \\\n  --resource-group three-horizons-shared \\\n  --query instrumentationKey -o tsv)\n\n# Store the key in Key Vault\naz keyvault secret set \\\n  --name appinsights-key \\\n  --vault-name "$KEY_VAULT_NAME" \\\n  --value "$APPINSIGHTS_KEY"\n\n# Create Kubernetes secret for applications\nkubectl create secret generic appinsights-secret \\\n  --namespace three-horizons-system \\\n  --from-literal=instrumentationKey="$APPINSIGHTS_KEY"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"step-64-configure-log-analytics-queries",children:"Step 6.4: Configure Log Analytics Queries"}),"\n",(0,t.jsx)(n.p,{children:"Set up useful Log Analytics queries for monitoring:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Example KQL queries for monitoring AKS/ARO clusters\n\n# CPU usage by node\ncat > cpu-by-node-query.kql <<EOF\nPerf\n| where ObjectName == "K8SNode" \n| where CounterName == "cpuUsageNanoCores" \n| summarize CPUUsageCores = max(CounterValue) / 1000000000 by Computer, bin(TimeGenerated, 1m) \n| render timechart\nEOF\n\n# Memory usage by node\ncat > memory-by-node-query.kql <<EOF\nPerf\n| where ObjectName == "K8SNode" \n| where CounterName == "memoryRssBytes" \n| summarize MemoryUsageGB = max(CounterValue) / 1073741824 by Computer, bin(TimeGenerated, 1m) \n| render timechart\nEOF\n\n# Pod restarts\ncat > pod-restarts-query.kql <<EOF\nKubePodInventory\n| where ContainerRestartCount > 0\n| project TimeGenerated, Computer, Namespace, Name, ContainerRestartCount\n| summarize TotalRestarts = max(ContainerRestartCount) by Computer, Namespace, Name\n| sort by TotalRestarts desc\nEOF\n\n# Failed deployments\ncat > failed-deployments-query.kql <<EOF\nKubeEvents\n| where not(isempty(Namespace))\n| where Reason in ("Failed", "FailedCreate", "FailedScheduling")\n| project TimeGenerated, Namespace, Name, Reason, Message\n| sort by TimeGenerated desc\nEOF\n\necho "KQL queries have been saved to the current directory"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"step-65-create-monitoring-dashboards",children:"Step 6.5: Create Monitoring Dashboards"}),"\n",(0,t.jsx)(n.p,{children:"Create custom dashboards for monitoring:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create a custom dashboard in Azure Portal\naz portal dashboard create \\\n  --resource-group three-horizons-shared \\\n  --name three-horizons-dashboard \\\n  --location centralus \\\n  --input-path ./dashboard-template.json\n\n# Note: You'll need to create the dashboard-template.json file separately\n# or use the Azure Portal to create and export a dashboard\n"})}),"\n",(0,t.jsx)(n.h2,{id:"step-66-configure-alerts",children:"Step 6.6: Configure Alerts"}),"\n",(0,t.jsx)(n.p,{children:"Set up alerts for critical conditions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Create an action group for notifications\naz monitor action-group create \\\n  --resource-group three-horizons-shared \\\n  --name three-horizons-alerts \\\n  --short-name th-alerts \\\n  --email-receiver name=admin email=admin@example.com\n\n# Create an alert for high CPU usage\naz monitor metrics alert create \\\n  --resource-group three-horizons-platform \\\n  --name high-cpu-alert \\\n  --scopes $(az aks show --resource-group three-horizons-platform --name three-horizons-aks --query id -o tsv) \\\n  --condition "avg Percentage CPU > 80" \\\n  --window-size 5m \\\n  --evaluation-frequency 1m \\\n  --action $(az monitor action-group show --resource-group three-horizons-shared --name three-horizons-alerts --query id -o tsv)\n\n# Create an alert for high memory usage\naz monitor metrics alert create \\\n  --resource-group three-horizons-platform \\\n  --name high-memory-alert \\\n  --scopes $(az aks show --resource-group three-horizons-platform --name three-horizons-aks --query id -o tsv) \\\n  --condition "avg Percentage Memory > 80" \\\n  --window-size 5m \\\n  --evaluation-frequency 1m \\\n  --action $(az monitor action-group show --resource-group three-horizons-shared --name three-horizons-alerts --query id -o tsv)\n'})}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)(n.p,{children:"For production environments, consider implementing:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Distributed tracing with Jaeger or Zipkin"}),"\n",(0,t.jsx)(n.li,{children:"Custom metrics collection for business KPIs"}),"\n",(0,t.jsx)(n.li,{children:"Log aggregation with Elasticsearch, Fluentd, and Kibana (EFK stack)"}),"\n",(0,t.jsx)(n.li,{children:"Service mesh observability with Istio or Linkerd"}),"\n"]})]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var o=r(6540);const t={},a=o.createContext(t);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);