"use strict";(self.webpackChunkthree_horizons_docusaurus=self.webpackChunkthree_horizons_docusaurus||[]).push([[123],{2823:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"phase4-github","title":"Phase 4: GitHub Integration","description":"In this phase, we\'ll connect the Three Horizons Platform with GitHub Enterprise to enable source control, collaboration, and CI/CD workflows.","source":"@site/docs/phase4-github.md","sourceDirName":".","slug":"/phase4-github","permalink":"/docs/phase4-github","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docsSidebar","previous":{"title":"Phase 3: Developer Hub Deployment","permalink":"/docs/phase3-devhub"},"next":{"title":"Phase 5: CI/CD Pipeline Setup","permalink":"/docs/phase5-cicd"}}');var o=t(4848),a=t(8453);const r={sidebar_position:5},s="Phase 4: GitHub Integration",u={},l=[{value:"Step 4.1: Configure GitHub Authentication",id:"step-41-configure-github-authentication",level:2},{value:"Step 4.2: Configure GitHub Integration for Developer Hub",id:"step-42-configure-github-integration-for-developer-hub",level:2},{value:"Step 4.3: Create GitHub Actions Workflows",id:"step-43-create-github-actions-workflows",level:2},{value:"Step 4.4: Configure GitHub Copilot Enterprise",id:"step-44-configure-github-copilot-enterprise",level:2},{value:"Step 4.5: Configure GitHub Advanced Security",id:"step-45-configure-github-advanced-security",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"phase-4-github-integration",children:"Phase 4: GitHub Integration"})}),"\n",(0,o.jsx)(n.p,{children:"In this phase, we'll connect the Three Horizons Platform with GitHub Enterprise to enable source control, collaboration, and CI/CD workflows."}),"\n",(0,o.jsx)(n.h2,{id:"step-41-configure-github-authentication",children:"Step 4.1: Configure GitHub Authentication"}),"\n",(0,o.jsx)(n.p,{children:"First, set up authentication between the Developer Hub and GitHub Enterprise:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Create a GitHub OAuth App\n# 1. Go to your GitHub Enterprise organization settings\n# 2. Navigate to Developer Settings > OAuth Apps > New OAuth App\n# 3. Fill in the following details:\n#    - Application name: Three Horizons Developer Hub\n#    - Homepage URL: https://devhub.example.com\n#    - Authorization callback URL: https://devhub.example.com/api/auth/github/handler/frame\n# 4. Register the application and note the Client ID and Client Secret\n\n# Store GitHub OAuth credentials in Key Vault\naz keyvault secret set \\\n  --name github-oauth-client-id \\\n  --vault-name "$KEY_VAULT_NAME" \\\n  --value "<your-github-client-id>"\n\naz keyvault secret set \\\n  --name github-oauth-client-secret \\\n  --vault-name "$KEY_VAULT_NAME" \\\n  --value "<your-github-client-secret>"\n\n# Create Kubernetes secrets for GitHub OAuth\nkubectl create secret generic github-oauth \\\n  --namespace developer-hub \\\n  --from-literal=client-id="<your-github-client-id>" \\\n  --from-literal=client-secret="<your-github-client-secret>"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"step-42-configure-github-integration-for-developer-hub",children:"Step 4.2: Configure GitHub Integration for Developer Hub"}),"\n",(0,o.jsx)(n.p,{children:"Update the Developer Hub configuration to integrate with GitHub:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Create a ConfigMap for GitHub integration\nkubectl apply -f - <<EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: github-integration-config\n  namespace: developer-hub\ndata:\n  app-config.yaml: |\n    app:\n      title: Three Horizons Developer Hub\n      baseUrl: https://devhub.example.com\n    \n    organization:\n      name: Your Organization\n    \n    auth:\n      environment: production\n      providers:\n        github:\n          development:\n            clientId: \\${GITHUB_CLIENT_ID}\n            clientSecret: \\${GITHUB_CLIENT_SECRET}\n    \n    catalog:\n      providers:\n        github:\n          yourOrgName:\n            organization: your-github-org\n            catalogPath: /catalog-info.yaml\n            filters:\n              branch: main\nEOF\n\n# Update the Developer Hub deployment to use the ConfigMap\nkubectl patch backstage developer-hub -n developer-hub --type=merge -p \'{\n  "spec": {\n    "extraVolumeMounts": [\n      {\n        "name": "github-config",\n        "mountPath": "/opt/app-root/src/app-config.local.yaml",\n        "subPath": "app-config.yaml"\n      }\n    ],\n    "extraVolumes": [\n      {\n        "name": "github-config",\n        "configMap": {\n          "name": "github-integration-config"\n        }\n      }\n    ],\n    "extraEnvs": [\n      {\n        "name": "GITHUB_CLIENT_ID",\n        "valueFrom": {\n          "secretKeyRef": {\n            "name": "github-oauth",\n            "key": "client-id"\n          }\n        }\n      },\n      {\n        "name": "GITHUB_CLIENT_SECRET",\n        "valueFrom": {\n          "secretKeyRef": {\n            "name": "github-oauth",\n            "key": "client-secret"\n          }\n        }\n      }\n    ]\n  }\n}\'\n'})}),"\n",(0,o.jsx)(n.h2,{id:"step-43-create-github-actions-workflows",children:"Step 4.3: Create GitHub Actions Workflows"}),"\n",(0,o.jsx)(n.p,{children:"Set up GitHub Actions workflows for CI/CD:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# Example GitHub Actions workflow for a typical application\n# Save this as .github/workflows/ci-cd.yml in your application repositories\n\nname: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n          cache: 'npm'\n      \n      - name: Install dependencies\n        run: npm ci\n      \n      - name: Run tests\n        run: npm test\n      \n      - name: Build\n        run: npm run build\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v2\n      \n      - name: Login to ACR\n        uses: docker/login-action@v2\n        with:\n          registry: ${{ secrets.ACR_SERVER }}\n          username: ${{ secrets.ACR_USERNAME }}\n          password: ${{ secrets.ACR_PASSWORD }}\n      \n      - name: Build and push Docker image\n        uses: docker/build-push-action@v4\n        with:\n          context: .\n          push: true\n          tags: ${{ secrets.ACR_SERVER }}/${{ github.repository }}:latest\n      \n      - name: Set up Kubernetes tools\n        uses: azure/setup-kubectl@v3\n      \n      - name: Set AKS context\n        uses: azure/aks-set-context@v3\n        with:\n          resource-group: three-horizons-platform\n          cluster-name: three-horizons-aks\n          admin: 'false'\n          use-kubelogin: 'true'\n          creds: ${{ secrets.AZURE_CREDENTIALS }}\n      \n      - name: Deploy to AKS\n        run: |\n          kubectl apply -f kubernetes/deployment.yaml\n          kubectl apply -f kubernetes/service.yaml\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-44-configure-github-copilot-enterprise",children:"Step 4.4: Configure GitHub Copilot Enterprise"}),"\n",(0,o.jsx)(n.p,{children:"Set up GitHub Copilot Enterprise for AI-assisted development:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# 1. Go to your GitHub Enterprise organization settings\n# 2. Navigate to GitHub Copilot > Policies\n# 3. Enable GitHub Copilot for your organization\n# 4. Set up access policies for your development teams\n# 5. Configure any required compliance settings\n\n# For individual developers, they can enable Copilot in their IDE:\n# - For VS Code: Install the GitHub Copilot extension\n# - For JetBrains IDEs: Install the GitHub Copilot plugin\n# - For Visual Studio: Install the GitHub Copilot extension\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-45-configure-github-advanced-security",children:"Step 4.5: Configure GitHub Advanced Security"}),"\n",(0,o.jsx)(n.p,{children:"Enable GitHub Advanced Security features for enhanced code security:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# 1. Go to your GitHub Enterprise organization settings\n# 2. Navigate to Code security and analysis\n# 3. Enable the following features:\n#    - Dependabot alerts\n#    - Dependabot security updates\n#    - Code scanning\n#    - Secret scanning\n\n# Create a standard code scanning workflow\n# Save this as .github/workflows/codeql-analysis.yml in your repositories\n\nname: \"CodeQL Analysis\"\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  schedule:\n    - cron: '0 0 * * 0'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n      \n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v3\n      \n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v2\n      with:\n        languages: javascript, typescript\n        \n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v2\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const o={},a=i.createContext(o);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);