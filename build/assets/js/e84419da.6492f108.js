"use strict";(self.webpackChunkthree_horizons_docusaurus=self.webpackChunkthree_horizons_docusaurus||[]).push([[23],{5086:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"phase7-validation","title":"Phase 7: Platform Validation","description":"In this phase, we\'ll validate the Three Horizons Platform to ensure all components are working correctly and integrated properly.","source":"@site/docs/phase7-validation.md","sourceDirName":".","slug":"/phase7-validation","permalink":"/three-horizon-site/docs/phase7-validation","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"docsSidebar","previous":{"title":"Phase 6: Monitoring & Observability","permalink":"/three-horizon-site/docs/phase6-monitoring"},"next":{"title":"Phase 8: Microsoft DevBox Configuration","permalink":"/three-horizon-site/docs/phase8-devbox"}}');var s=n(4848),i=n(8453);const r={sidebar_position:8},l="Phase 7: Platform Validation",o={},c=[{value:"Step 7.1: Validate Infrastructure Components",id:"step-71-validate-infrastructure-components",level:2},{value:"Step 7.2: Validate Developer Hub",id:"step-72-validate-developer-hub",level:2},{value:"Step 7.3: Validate GitHub Integration",id:"step-73-validate-github-integration",level:2},{value:"Step 7.4: Validate CI/CD Pipelines",id:"step-74-validate-cicd-pipelines",level:2},{value:"Step 7.5: Validate Monitoring",id:"step-75-validate-monitoring",level:2},{value:"Step 7.6: End-to-End Testing",id:"step-76-end-to-end-testing",level:2},{value:"Step 7.7: Security Validation",id:"step-77-security-validation",level:2}];function p(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",input:"input",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"phase-7-platform-validation",children:"Phase 7: Platform Validation"})}),"\n",(0,s.jsx)(t.p,{children:"In this phase, we'll validate the Three Horizons Platform to ensure all components are working correctly and integrated properly."}),"\n",(0,s.jsx)(t.h2,{id:"step-71-validate-infrastructure-components",children:"Step 7.1: Validate Infrastructure Components"}),"\n",(0,s.jsx)(t.p,{children:"First, let's validate the core infrastructure components:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'# Validate AKS/ARO cluster health\nkubectl get nodes\nkubectl get pods --all-namespaces\n\n# Check cluster version and status\naz aks show \\\n  --resource-group three-horizons-platform \\\n  --name three-horizons-aks \\\n  --query "{Name:name, K8sVersion:kubernetesVersion, ProvisioningState:provisioningState, Fqdn:fqdn}" \\\n  -o table\n\n# Validate networking\nkubectl run -it --rm --restart=Never network-test --image=mcr.microsoft.com/aks/fundamental/base-ubuntu:v0.0.11 -- bash -c "apt-get update && apt-get install -y curl && curl -s http://developer-hub.developer-hub.svc"\n\n# Validate storage\nkubectl create -f - <<EOF\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: validation-pvc\n  namespace: default\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\nEOF\n\nkubectl get pvc validation-pvc\n'})}),"\n",(0,s.jsx)(t.h2,{id:"step-72-validate-developer-hub",children:"Step 7.2: Validate Developer Hub"}),"\n",(0,s.jsx)(t.p,{children:"Validate the Red Hat Developer Hub deployment:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"# Check Developer Hub pods\nkubectl get pods -n developer-hub\n\n# Check Developer Hub services\nkubectl get svc -n developer-hub\n\n# Check Developer Hub ingress/route\nkubectl get ingress -n developer-hub\n\n# Validate Developer Hub API\nkubectl run -it --rm --restart=Never curl-test --image=curlimages/curl -- curl -s http://developer-hub.developer-hub.svc/api/catalog/entities\n\n# Clean up test pod\nkubectl delete pod curl-test\n"})}),"\n",(0,s.jsx)(t.h2,{id:"step-73-validate-github-integration",children:"Step 7.3: Validate GitHub Integration"}),"\n",(0,s.jsx)(t.p,{children:"Validate the GitHub integration:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"# Check GitHub OAuth secrets\nkubectl get secrets -n developer-hub github-oauth -o yaml\n\n# Validate GitHub API access (requires GitHub CLI)\ngh auth status\n\n# Test repository access\ngh repo list your-org --limit 5\n"})}),"\n",(0,s.jsx)(t.h2,{id:"step-74-validate-cicd-pipelines",children:"Step 7.4: Validate CI/CD Pipelines"}),"\n",(0,s.jsx)(t.p,{children:"Validate the CI/CD pipeline setup:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"# Check Flux installation\nflux check\n\n# List Flux sources\nflux get sources git\n\n# List Flux kustomizations\nflux get kustomizations\n\n# Trigger a test pipeline in GitHub Actions\ngh workflow run ci.yml -R your-org/your-repo\n\n# Check workflow status\ngh run list -R your-org/your-repo -L 5\n"})}),"\n",(0,s.jsx)(t.h2,{id:"step-75-validate-monitoring",children:"Step 7.5: Validate Monitoring"}),"\n",(0,s.jsx)(t.p,{children:"Validate the monitoring setup:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'# Check Prometheus pods\nkubectl get pods -n monitoring\n\n# Check Grafana service\nkubectl get svc -n monitoring prometheus-grafana\n\n# Test Prometheus API\nkubectl port-forward -n monitoring svc/prometheus-operated 9090:9090 &\ncurl -s http://localhost:9090/api/v1/targets | jq \'.data.activeTargets | length\'\npkill -f "port-forward"\n\n# Validate Azure Monitor\naz monitor log-analytics query \\\n  --workspace $(az monitor log-analytics workspace show --resource-group three-horizons-platform --workspace-name three-horizons-workspace --query customerId -o tsv) \\\n  --analytics-query "KubeNodeInventory | summarize count()" \\\n  -o table\n'})}),"\n",(0,s.jsx)(t.h2,{id:"step-76-end-to-end-testing",children:"Step 7.6: End-to-End Testing"}),"\n",(0,s.jsx)(t.p,{children:"Perform end-to-end testing of the platform:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'# Deploy a test application\nkubectl apply -f - <<EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: test-app\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: test-app\n  template:\n    metadata:\n      labels:\n        app: test-app\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:latest\n        ports:\n        - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: test-app\n  namespace: default\nspec:\n  selector:\n    app: test-app\n  ports:\n  - port: 80\n    targetPort: 80\n  type: ClusterIP\nEOF\n\n# Verify deployment\nkubectl get pods -l app=test-app\nkubectl get svc test-app\n\n# Test application access\nkubectl port-forward svc/test-app 8080:80 &\ncurl -s http://localhost:8080\npkill -f "port-forward"\n\n# Clean up test application\nkubectl delete deployment test-app\nkubectl delete service test-app\n'})}),"\n",(0,s.jsx)(t.h2,{id:"step-77-security-validation",children:"Step 7.7: Security Validation"}),"\n",(0,s.jsx)(t.p,{children:"Validate the security configuration:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'# Check network policies\nkubectl get networkpolicies --all-namespaces\n\n# Check pod security policies or pod security standards\nkubectl get podsecuritypolicies 2>/dev/null || echo "Using Pod Security Standards instead of PSPs"\n\n# Check RBAC configuration\nkubectl get clusterroles,clusterrolebindings | grep -i three-horizons\n\n# Validate Key Vault integration\naz keyvault secret list --vault-name "$KEY_VAULT_NAME" --query "[].{Name:name}" -o table\n\n# Check for exposed secrets\nkubectl get secrets --all-namespaces | grep -v "kubernetes.io/service-account-token"\n'})}),"\n",(0,s.jsxs)(t.admonition,{title:"Validation Checklist",type:"tip",children:[(0,s.jsx)(t.p,{children:"Use this checklist to ensure all components are properly validated:"}),(0,s.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ","AKS/ARO cluster is healthy and accessible"]}),"\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Developer Hub is deployed and accessible"]}),"\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ","GitHub integration is working correctly"]}),"\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ","CI/CD pipelines are configured and operational"]}),"\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Monitoring and alerting are set up"]}),"\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Security controls are in place"]}),"\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ","End-to-end application deployment works"]}),"\n"]})]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var a=n(6540);const s={},i=a.createContext(s);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);